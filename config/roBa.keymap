#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100
#define MOUSE 4
#define SCROLL 5
#define NUM 2

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <22 23>;
        };

        eq {
            bindings = <&kp LS(MINUS)>;
            key-positions = <20 21>;
        };

        question {
            bindings = <&kp QUESTION>;
            key-positions = <32 33>;
        };

        Left_click {
            bindings = <&mkp LCLK>;
            key-positions = <31 30>;
        };

        Right_click {
            bindings = <&mkp RCLK>;
            key-positions = <31 32>;
        };

        Escape {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        Copy {
            bindings = <&kp LC(C)>;
            key-positions = <24 26>;
        };

        Paste {
            bindings = <&kp LC(V)>;
            key-positions = <24 25>;
        };

        Cut {
            bindings = <&kp LC(X)>;
            key-positions = <24 23>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        log_in: log_in {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Y &kp M &kp O &kp R &kp I &kp T &kp A &kp N &kp I &kp N0 &kp N0 &kp N1 &kp TAB &kp R &kp O &kp N &kp B &kp A &kp K &kp U &kp N2 &kp N2 &kp LEFT_BRACKET &kp ENTER>;
            label = "LOG_IN";
            wait-ms = <20>;
        };

        jump_cell: jump_cell {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F5>, <&macro_wait_time 20>, <&kp ENTER>;

            label = "JUMP_CELL";
        };

        bt0: bt0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&tog_off 1>,
                <&macro_wait_time 200>,
                <&bt BT_SEL 0>,
                <&macro_wait_time 500>;

            label = "BT0";
        };

        bt1: bt1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&tog_off 1>,
                <&macro_wait_time 200>,
                <&bt BT_SEL 1>,
                <&macro_wait_time 500>,
                <&tog_on 1>;

            label = "BT1";
        };

        Today: Today {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LC(LS(D))>,
                <&macro_wait_time 20>,
                <&kp LEFT_SHIFT &kp LCTRL>,
                <&macro_wait_time 20>,
                <&kp LEFT_SHIFT &kp LCTRL>,
                <&macro_wait_time 30>;

            label = "TODAY";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        // 新しいスクロール動作の追加

        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            // 追加: スクロールのタップ時間を設定 (20ms)

            tap-ms = <20>;
        };

        tog_on: toggle_layer_on_only {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer On";
            toggle-mode = "on";
        };

        tog_off: toggle_layer_off_only {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer Off";
            toggle-mode = "off";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q      &kp W         &kp E         &kp R                      &kp T                                                            &kp Y        &kp U  &kp I      &kp O    &kp P
&kp A      &kp S         &kp D         &kp F                      &kp G                 &kp LC(W)                 &kp LS(INT1)     &kp H        &kp J  &kp K      &lt 5 L  &kp MINUS
&kp Z      &kp X         &kp C         &kp V                      &kp B                 &kp LEFT_BRACKET          &lt 7 SLASH      &kp N        &kp M  &kp COMMA  &kp DOT  &kp SEMICOLON
&kp LC(Z)  &kp LEFT_WIN  &kp LEFT_ALT  &mt LEFT_ALT INT_MUHENKAN  &mt LEFT_SHIFT SPACE  &mt LCTRL INT_HENKAN      &lt 3 BACKSPACE  &lt 2 ENTER                             &kp LS(LC(NUMBER_4))
            >;

            sensor-bindings = <&scroll_up_down>;
            sensor-bindings = <&scroll_up_down>;
        };

        Windows {
            bindings = <
&kp Q      &kp W         &kp E         &kp R                      &kp T                                                            &kp Y        &kp U  &kp I      &kp O    &kp P
&kp A      &kp S         &kp D         &kp F                      &kp G                 &kp LC(W)                 &kp LS(INT1)     &kp H        &kp J  &kp K      &lt 5 L  &kp MINUS
&kp Z      &kp X         &kp C         &kp V                      &kp B                 &kp LEFT_BRACKET          &lt 7 SLASH      &kp N        &kp M  &kp COMMA  &kp DOT  &kp SEMICOLON
&kp LC(Z)  &kp LEFT_WIN  &kp LEFT_ALT  &mt LEFT_ALT INT_MUHENKAN  &mt LEFT_SHIFT SPACE  &mt LCTRL INT_HENKAN      &lt 4 BACKSPACE  &lt 2 ENTER                             &kp PRINTSCREEN
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        Number {
            bindings = <
&kp SLASH          &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp MINUS                              &kp LS(NUMBER_8)  &kp LS(NUMBER_9)  &kp UP_ARROW    &kp RIGHT_BRACKET  &kp BACKSLASH
&kp DOUBLE_QUOTES  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp COLON   &kp LS(MINUS)      &trans  &kp BACKSPACE     &kp LEFT_ARROW    &kp DOWN_ARROW  &kp RIGHT_ARROW    &kp DELETE
&kp SINGLE_QUOTE   &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PERIOD  &kp COMMA          &trans  &kp F10           &kp HOME          &kp DOWN_ARROW  &kp END            &kp SLASH
&trans             &trans        &kp NUMBER_0  &trans        &trans      &trans             &trans  &trans                                                                 &log_in
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        Function_Mac {
            bindings = <
&trans  &kp F7  &kp F8  &kp F9  &kp F10                      &kp EQUAL           &kp LS(NUMBER_7)  &kp LS(NUMBER_8)  &kp LS(NUMBER_9)  &kp INT_YEN
&trans  &kp F4  &kp F5  &kp F6  &kp F11  &trans      &trans  &kp LC(UP_ARROW)    &kp RS(NUMBER_4)  &kp LS(NUMBER_5)  &kp LS(NUMBER_6)  &kp LC(W)
&trans  &kp F1  &kp F2  &kp F3  &kp F12  &trans      &trans  &kp LC(DOWN_ARROW)  &kp LS(NUMBER_1)  &kp LS(NUMBER_2)  &kp LS(NUMBER_3)  &trans
&trans  &trans  &trans  &trans  &trans   &trans      &trans  &trans                                                                    &trans
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        Function_Windows {
            bindings = <
&trans         &kp F7  &kp F8  &kp F9  &kp F10                                     &kp EQUAL         &kp LS(NUMBER_7)  &kp LS(NUMBER_8)  &kp LS(NUMBER_9)  &kp INT_YEN
&Today         &kp F4  &kp F5  &kp F6  &kp F11  &trans      &kp LC(RIGHT_BRACKET)  &kp LA(UP_ARROW)  &kp LS(NUMBER_4)  &kp LS(NUMBER_5)  &kp LS(NUMBER_6)  &kp LC(W)
&kp RS(RC(N))  &kp F1  &kp F2  &kp F3  &kp F12  &trans      &jump_cell             &kp ENTER         &kp LS(NUMBER_1)  &kp LS(NUMBER_2)  &kp LS(NUMBER_3)  &trans
&trans         &trans  &trans  &trans  &trans   &trans      &trans                 &trans                                                                  &kp LA(F4)
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                               &trans             &kp LG(TAB)         &kp LG(UP_ARROW)     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans           &trans             &kp LA(LEFT_ARROW)  &kp LA(RIGHT_ARROW)  &trans  &kp LC(W)
&trans  &trans  &trans  &trans  &trans  &trans      &kp LC(PAGE_UP)  &kp LC(PAGE_DOWN)  &kp LC(LEFT_ARROW)  &kp LC(RIGHT_ARROW)  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &kp LS(LG(TAB))  &kp LG(TAB)                                                         &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans  &bt0    &bt1    &trans  &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans  &trans  &trans  &trans  &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                          &bt BT_CLR_ALL
            >;
        };
    };
};
